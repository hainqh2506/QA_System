import logging
import streamlit as st
import time
from langchain_core.messages import AIMessage, HumanMessage, SystemMessage
from dotenv import load_dotenv
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate
from model_config import load_gpt4o_mini_model, VietnameseEmbeddings
from pipeline import step5_retrieval ,step6_qa_db
# Configure logging with UTF-8 encoding
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
COLLECTION_NAME = "raptor"
QA_COLLECTION_NAME = "base_qa"
THRESHOLD = 0.85
# Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn global
load_dotenv()
st.set_page_config(page_title="University Assistant", page_icon="ü§ñ")
st.title("University Assistant")
@st.cache_resource
def initialize_model_and_db():
    logger.info("Kh·ªüi t·∫°o model, database v√† FAQ...")
    llm = load_gpt4o_mini_model()
    corpus, milvus_db= step5_retrieval(collection_name=COLLECTION_NAME)
    milvus_qa_db = step6_qa_db(collection_name = QA_COLLECTION_NAME)
    return llm, corpus, milvus_db, milvus_qa_db

llm, corpus, milvus_db, milvus_qa_db = initialize_model_and_db()

def rewrite_question(user_query, formatted_history):
    logger.info("=== B·∫Øt ƒë·∫ßu vi·∫øt l·∫°i c√¢u h·ªèi ===")
    #logger.info(f"C√¢u h·ªèi g·ªëc: {user_query}")
    
    if formatted_history:
        logger.info("ƒêang s·ª≠ d·ª•ng l·ªãch s·ª≠ chat ƒë·ªÉ vi·∫øt l·∫°i c√¢u h·ªèi")
        #logger.info(f"L·ªãch s·ª≠ chat ƒë√£ format: {formatted_history}")
    else:
        logger.info("Kh√¥ng c√≥ l·ªãch s·ª≠ chat tr∆∞·ªõc ƒë√≥")
    
    rewrite_template = """
    B·∫°n ƒëang trong m·ªôt cu·ªôc h·ªôi tho·∫°i FAQ. 
    Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
    1. Tinh ch·ªânh l·∫°i ##TRUY V·∫§N C·ª¶A NG∆Ø·ªúI D√ôNG m·ªôt c√°ch r√µ r√†ng, ƒë·ªôc l·∫≠p, kh√¥ng ph·ª• thu·ªôc v√†o ng·ªØ c·∫£nh ##L·ªäCH S·ª¨ TR√í CHUY·ªÜN: b·∫±ng c√°ch t·∫≠p trung v√†o chi ti·∫øt cu·ªôc h·ªôi tho·∫°i g·∫ßn nh·∫•t.
    2. Ph√¢n lo·∫°i ##TRUY V·∫§N C·ª¶A NG∆Ø·ªúI D√ôNG c√≥ thu·ªôc th·∫ª <spam> hay kh√¥ng, n·∫øu c√≥ th√¨ tr·∫£ v·ªÅ <spam> + ##TRUY V·∫§N C·ª¶A NG∆Ø·ªúI D√ôNG.

    QUY T·∫ÆC TINH CH·ªàNH:
    - L√†m cho truy v·∫•n c·ª• th·ªÉ v√† r√µ r√†ng h∆°n, ƒë·∫£m b·∫£o ph√π h·ª£p v·ªõi √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng v√† hi·ªÉu bi·∫øt t·ª´ ##L·ªäCH S·ª¨ TR√í CHUY·ªÜN:.
    - T·∫≠p trung v√†o n·ªôi dung ch√≠nh, gi·ªØ nguy√™n √Ω nghƒ©a c√¢u h·ªèi.
    - Vi·∫øt ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, s·ª≠a l·ªói ch√≠nh t·∫£, ng·ªØ ph√°p.

    QUY T·∫ÆC PH√ÇN LO·∫†I:
    Tr·∫£ v·ªÅ <spam> + ##TRUY V·∫§N C·ª¶A NG∆Ø·ªúI D√ôNG n·∫øu c√¢u h·ªèi ch·ª©a:
    - Ng√¥n t·ª´ x√∫c ph·∫°m, th√π ƒë·ªãch
    - N·ªôi dung qu·∫£ng c√°o, spam
    - T·ª´ ng·ªØ t·ª•c tƒ©u, khi√™u d√¢m
    - Link ƒë·ªôc h·∫°i, l·ª´a ƒë·∫£o
    - N·ªôi dung ch√≠nh tr·ªã, t√¥n gi√°o nh·∫°y c·∫£m
    - C√¢u h·ªèi kh√¥ng li√™n quan, kh√¥ng c√≥ √Ω nghƒ©a
    - C√¢u h·ªèi x√£ giao ƒë∆°n gi·∫£n (v√≠ d·ª•: ch√†o, t·∫°m bi·ªát, b·∫°n kh·ªèe kh√¥ng)
    - C√¢u h·ªèi v·ªÅ th·ªùi ti·∫øt chung chung (v√≠ d·ª•: h√¥m nay tr·ªùi th·∫ø n√†o)
    - Gi·ªØ nguy√™n ##TRUY V·∫§N C·ª¶A NG∆Ø·ªúI D√ôNG n·∫øu ƒë√£ r√µ r√†ng v√† kh√¥ng thu·ªôc c√°c tr∆∞·ªùng h·ª£p tr√™n.
    V√≠ d·ª•: <spam> b·∫°n th·∫≠t ng·ªëc
    
    ##L·ªäCH S·ª¨ TR√í CHUY·ªÜN:
    {chat_history}

    ##TRUY V·∫§N C·ª¶A NG∆Ø·ªúI D√ôNG: 
    User: {question}

    ##TRUY V·∫§N ƒê√É CH·ªàNH S·ª¨A:
    User:
"""
    rewrite_prompt = ChatPromptTemplate.from_template(rewrite_template)
    chain = rewrite_prompt | llm | StrOutputParser()
    
    logger.info("ƒêang g·ª≠i y√™u c·∫ßu vi·∫øt l·∫°i c√¢u h·ªèi t·ªõi model...")
    rewritten_query = chain.invoke({
        "chat_history": formatted_history,
        "question": user_query
    })
    logger.info(f"c√¢u h·ªèi g·ªëc: {user_query}")
    logger.info(f"C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c vi·∫øt l·∫°i: {rewritten_query.strip()}")
    logger.info("=== K·∫øt th√∫c vi·∫øt l·∫°i c√¢u h·ªèi ===")
    return rewritten_query.strip()

def format_chat_history(chat_history, max_pairs=5):
    formatted_history = []
    qa_pairs = []

    for i in range(len(chat_history)-1):
        if isinstance(chat_history[i], HumanMessage) and isinstance(chat_history[i+1], AIMessage):
            qa_pairs.append({
                "question": chat_history[i].content,
                "answer": chat_history[i+1].content
            })

    recent_pairs = qa_pairs[-max_pairs:] if qa_pairs else []
    
    for pair in recent_pairs:
        formatted_history.append(f"Human: {pair['question']}\nAssistant: {pair['answer']}")

    return "\n\n".join(formatted_history)
def check_faq(user_query, milvus_qa_db = milvus_qa_db, threshold=THRESHOLD):
    """
    Ki·ªÉm tra c√¢u h·ªèi trong MilvusQADB thay v√¨ file JSON.
    - `user_query`: C√¢u h·ªèi ng∆∞·ªùi d√πng.
    - `milvus_qa_db`: ƒê·ªëi t∆∞·ª£ng MilvusQADB ƒë√£ kh·ªüi t·∫°o.
    - `threshold`: Ng∆∞·ª°ng ƒë·ªô t∆∞∆°ng ƒë·ªìng (cosine similarity).

    Tr·∫£ v·ªÅ:
    - C√¢u tr·∫£ l·ªùi t·ª´ Milvus n·∫øu t√¨m th·∫•y.
    - None n·∫øu kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ph√π h·ª£p.
    """
    logger.info("Truy v·∫•n MilvusQADB cho FAQ...")
    # G·ªçi `semantic_qa_search` ƒë·ªÉ t√¨m ki·∫øm trong collection
    result = milvus_qa_db.semantic_qa_search(query=user_query, similarity_threshold=threshold, top_k=1)

    if result:
        logger.info("C√¢u h·ªèi ph√π h·ª£p t√¨m th·∫•y trong MilvusQADB.")
        return result.get("answer")  # Tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi t·ªët nh·∫•t
    
    logger.info("Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ph√π h·ª£p trong MilvusQADB.")
    return None
def stream_text(text):
    """Generator function ƒë·ªÉ stream t·ª´ng t·ª´ c·ªßa vƒÉn b·∫£n"""
    time.sleep(1)
    for word in text.split():
        yield word + " "
        # N·∫øu mu·ªën ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô stream, c√≥ th·ªÉ th√™m time.sleep()
        time.sleep(0.05)

def get_response(user_query, chat_history,milvus_db = milvus_db ):
    logger.info("=== B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o c√¢u tr·∫£ l·ªùi ===")

    # Ki·ªÉm tra trong FAQ
    answer = check_faq(user_query)
    if answer:
        return stream_text(answer)
    #Kh√¥ng t√¨m th·∫•y, g·ªçi ƒë·∫øn RAG
    logger.info("Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ph√π h·ª£p trong FAQ, chuy·ªÉn ƒë·∫øn h·ªá th·ªëng RAG.")
    # Vi·∫øt l·∫°i c√¢u h·ªèi
        #Format d·ªØ li·ªáu
    logger.info("=== B·∫Øt ƒë·∫ßu format chat history ===")
    formatted_history = format_chat_history(chat_history, max_pairs=5)
    rewritten_query = rewrite_question(user_query, formatted_history)
    if rewritten_query.startswith("<spam>"):
        default_response = "Xin l·ªói, t√¥i ch·ªâ l√† tr·ª£ l√Ω ·∫£o c·ªßa ƒê·∫°i h·ªçc v√† t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y. N·∫øu b·∫°n c√≥ c√¢u h·ªèi n√†o kh√°c h√£y cho t√¥i bi·∫øt nh√©!"
        logger.info("Ph√°t hi·ªán c√¢u h·ªèi kh√¥ng li√™n quan, tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh.")
        return stream_text(default_response)
    # Truy v·∫•n th√¥ng tin li√™n quan
    logger.info("=== B·∫Øt ƒë·∫ßu truy xu·∫•t t√†i li·ªáu ===")
    relevant_docs = milvus_db.perform_retrieval(query=rewritten_query, top_k=5)
    logger.info(f"S·ªë l∆∞·ª£ng t√†i li·ªáu t√¨m ƒë∆∞·ª£c: {len(relevant_docs)}")
    logger.info(f"relevant docs: {relevant_docs}")
    logger.info("=== K·∫øt th√∫c truy xu·∫•t t√†i li·ªáu ===")


    doc_context = "\n\n".join([doc.page_content + doc.metadata.get("source") for doc in relevant_docs])
    logger.info(f"ƒê·ªô d√†i context: {len(doc_context)} k√Ω t·ª±")
    logger.info("=== K·∫øt th√∫c format d·ªØ li·ªáu ===")
    
    QAtemplate = """B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o c·ªßa ƒê·∫°i h·ªçc , th√¥ng minh v√† th√¢n thi·ªán. 
    
    D·ª±a tr√™n ##L·ªäCH S·ª¨ TR√í CHUY·ªÜN v√† ##T√Äi LI·ªÜU THAM KH·∫¢O ƒë∆∞·ª£c cung c·∫•p, h√£y tr·∫£ l·ªùi ##C√ÇU H·ªéI C·ª¶A NG∆Ø·ªúI D√ôNG.
    N·∫øu c√¢u tr·∫£ l·ªùi y√™u c·∫ßu th√¥ng tin c√° nh√¢n ho·∫∑c th√¥ng tin t·ª´ cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc ƒë√≥, h√£y s·ª≠ d·ª•ng th√¥ng tin t·ª´ l·ªãch s·ª≠ tr√≤ chuy·ªán.
    N·∫øu c√¢u tr·∫£ l·ªùi y√™u c·∫ßu ki·∫øn th·ª©c chuy√™n m√¥n, h√£y tham kh·∫£o c√°c t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p.
    N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin trong c·∫£ hai ngu·ªìn tr√™n, h√£y tr·∫£ l·ªùi 'Xin l·ªói, t√¥i kh√¥ng c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y, n·∫øu b·∫°n mu·ªën bi·∫øt th√™m th√¥ng tin g√¨ kh√°c h√£y cho t√¥i bi·∫øt nh√©!'.

    ##L·ªäCH S·ª¨ TR√í CHUY·ªÜN:
    {chat_history}

    ##T√Äi LI·ªÜU THAM KH·∫¢O:
    {documents}

    ##C√ÇU H·ªéI C·ª¶A NG∆Ø·ªúI D√ôNG: {question}
    
    Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† gi·ªØ gi·ªçng ƒëi·ªáu th√¢n thi·ªán, t·ª´ ch·ªëi tr·∫£ l·ªùi c√°c c√¢u h·ªèi mang t√≠nh nh·∫°y c·∫£m.
    ##C√ÇU TR·∫¢ L·ªúI:
    """

    QAprompt = ChatPromptTemplate.from_template(QAtemplate)
    logger.info("=== B·∫Øt ƒë·∫ßu t·∫°o c√¢u tr·∫£ l·ªùi ===")
    logger.info(f"=== full QA_prompt {QAprompt}===")
    
    chain = QAprompt | llm | StrOutputParser()
    logger.info("ƒêang g·ª≠i y√™u c·∫ßu t·ªõi model...")
    response = chain.stream({
        "chat_history": formatted_history,
        "documents": doc_context,
        "question": rewritten_query
    })
    logger.info("=== K·∫øt th√∫c t·∫°o c√¢u tr·∫£ l·ªùi ===")
    logger.info(f"C√¢u tr·∫£ l·ªùi: {response}")
    return response
####code m·ªõi #######
def process_user_input(user_query):
    if not user_query:
        return None
    if len(user_query) > 512:
        st.error("ƒê·ªô d√†i c√¢u h·ªèi qu√° d√†i, vui l√≤ng nh·∫≠p c√¢u h·ªèi ng·∫Øn h∆°n!")
        return None
    logger.info(f"\n=== B·∫Øt ƒë·∫ßu x·ª≠ l√Ω c√¢u h·ªèi m·ªõi ===")
    st.session_state.chat_history.append(HumanMessage(content=user_query))
    
    with st.chat_message("Human"):
        st.markdown(user_query)
    
    with st.chat_message("AI"):
        response = st.write_stream(get_response(user_query, st.session_state.chat_history))
        logger.info(f"C√¢u tr·∫£ l·ªùi cho ng∆∞·ªùi d√πng: {response}")
        logger.info("ƒê√£ g·ª≠i c√¢u tr·∫£ l·ªùi cho ng∆∞·ªùi d√πng")

    st.session_state.chat_history.append(AIMessage(content=response))
    logger.info("ƒê√£ c·∫≠p nh·∫≠t l·ªãch s·ª≠ chat")
    logger.info("=== K·∫øt th√∫c x·ª≠ l√Ω c√¢u h·ªèi ===\n")
    return response

def display_chat_history():
    if "chat_history" not in st.session_state:
        logger.info("=== Kh·ªüi t·∫°o phi√™n chat m·ªõi ===")
        st.session_state.chat_history = []
        st.session_state.chat_history.append(AIMessage(
            content="Ch√†o b·∫°n, T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa ƒê·∫°i h·ªçc . T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"
        ))
    
    for message in st.session_state.chat_history:
        if isinstance(message, AIMessage):
            with st.chat_message("AI"):
                st.write(message.content)
        elif isinstance(message, HumanMessage):
            with st.chat_message("Human"):
                st.write(message.content)

# Main interaction
display_chat_history()
user_query = st.chat_input("Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...")
if user_query:
    process_user_input(user_query)